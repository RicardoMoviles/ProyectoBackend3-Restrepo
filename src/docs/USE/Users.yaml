openapi: 3.0.1
info:
  title: Documentación de app web de adopción de mascotas
  description: API para una aplicación de adopción de mascotas
  version: 1.0.0

paths:
  # Mascotas
  /api/pets:
    get:
      summary: Obtiene todas las mascotas disponibles
      tags:
        - Pets
      responses:
        "200":
          description: Lista de mascotas obtenidas con éxito
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        "500":
          description: Error interno del servidor
    post:
      summary: Crea una nueva mascota
      tags:
        - Pets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/createPet'
      responses:
        "201":
          description: Mascota creada con éxito
        "500":
          description: Error al crear la mascota

  # Actualizar una mascota
  /api/pets/{id}:
    put:
      summary: Actualiza una mascota por su ID
      tags:
        - Pets
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/updatePet'
      responses:
        "200":
          description: Mascota actualizada con éxito
        "404":
          description: Mascota no encontrada

  # Eliminar una mascota
    delete:
      summary: Elimina una mascota por su ID
      tags:
        - Pets
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Mascota eliminada con éxito
        "404":
          description: Mascota no encontrada

  # Registro de usuario
  /api/sessions/register:
    post:
      summary: Registra un nuevo usuario
      tags:
        - Sessions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/createUser'
      responses:
        "201":
          description: Usuario registrado con éxito
        "400":
          description: Error en los datos proporcionados

   # Login de usuario
  /api/sessions/login:
    post:
      summary: Inicia sesión de un usuario existente
      tags:
        - Sessions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/loginUser'
      responses:
        "200":
          description: Usuario logueado con éxito
        "400":
          description: Error en los datos proporcionados

  # Obtener usuario actual
  /api/sessions/current:
    get:
      summary: Obtiene el usuario autenticado
      tags:
        - Sessions
      responses:
        "200":
          description: Usuario autenticado encontrado
        "401":
          description: No autorizado (usuario no autenticado)

  # Adopción
  /api/adoptions/{uid}/{pid}:
    post:
      summary: Realiza el proceso de adopción de una mascota
      tags:
        - Adoptions
      parameters:
        - name: uid
          in: path
          required: true
          description: ID del usuario que realiza la adopción
          schema:
            type: string
        - name: pid
          in: path
          required: true
          description: ID de la mascota que se adopta
          schema:
            type: string
      responses:
        "200":
          description: Adopción realizada con éxito
        "400":
          description: Error en los parámetros proporcionados
  # Obtener todas las adopciones
  /api/adoptions:
    get:
      summary: Obtiene una lista de todas las adopciones
      tags:
        - Adoptions
      responses:
        "200":
          description: Lista de adopciones encontrada

  # Obtener una adopción por ID
  /api/adoptions/{id}:
    get:
      summary: Obtiene una adopción por su ID
      tags:
        - Adoptions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Adopción encontrada
        "404":
          description: Adopción no encontrada
  # USUARIOS
  /api/users:
    get:
      summary: Obtiene todos los usuarios
      tags:
        - Users
      responses:
        "200":
          description: Lista de usuarios encontrada
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "500":
          description: Error en la base de datos
    post:
      summary: Crea un nuevo usuario
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/createUser'
      responses:
        "201":
          description: Usuario creado con éxito
        "400":
          description: Error al crear el usuario, datos incompletos o incorrectos
        "409":
          description: El correo electrónico ya está en uso
  /api/users/{uid}:
    get:
      summary: Obtiene un usuario por su ID
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: ID del usuario a obtener
          schema:
            type: string
      responses:
        "200":
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: Usuario no encontrado
    put:
      summary: Actualiza un usuario por su ID
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: ID del usuario a actualizar
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/UpdateUser'
      responses:
        "200":
          description: Usuario actualizado con éxito
        "400":
          description: Error al actualizar el usuario
        "404":
          description: Usuario no encontrado
    delete:
      summary: Elimina un usuario por su ID
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: ID del usuario a eliminar
          schema:
            type: string
      responses:
        "200":
          description: Usuario eliminado con éxito
        "404":
          description: Usuario no encontrado

components:
  schemas:
    Pet:
      type: object
      properties:
        _id:
          type: string
          description: ID de la mascota
        name:
          type: string
          description: Nombre de la mascota
        specie:
          type: string
          description: Especie de la mascota (Ej. Perro, Gato)
        birthDate:
          type: string
          format: date
          description: Fecha de nacimiento de la mascota
        adopted:
          type: boolean
          description: Estado de adopción de la mascota
        owner:
          type: string
          description: ID del propietario (usuario) de la mascota
        image:
          type: string
          description: URL de la imagen de la mascota
      example:
        _id: 60f85a3f8b8c4e301f89b7b3
        name: "Firulais"
        specie: "Perro"
        birthDate: "2020-05-15"
        adopted: false
        owner: "60f85a3f8b8c4e301f89b7b3"
        image: "https://example.com/imagen.jpg"

    User:
      type: object
      properties:
        _id:
          type: string
          description: ID del usuario
        first_name:
          type: string
          description: Nombre del usuario
        last_name:
          type: string
          description: Apellido del usuario
        email:
          type: string
          description: Correo electrónico del usuario
        password:
          type: string
          description: Contraseña del usuario
        role:
          type: string
          description: Rol del usuario (por ejemplo, "user" o "admin")
        pets:
          type: array
          items:
            type: string
            description: IDs de las mascotas del usuario
          description: Lista de mascotas asociadas al usuario
      example:
        _id: 60f85a3f8b8c4e301f89b7b3
        first_name: "Federico"
        last_name: "Osandón"
        email: "federico@gmail.com"
        password: "$2a$10$wDb5zx.e.LhZcy5Gjd9yXo.fPczBOG1bY7l1p48DtL7mL2gr.xOG"
        role: "user"
        pets: ["60f85a3f8b8c4e301f89b7b3", "60f85a3f8b8c4e301f89b7b4"]

  requestBodies:
  #Request de Users
    createUser:
      type: object
      properties:
        first_name:
          type: string
          description: Nombre del usuario
        last_name:
          type: string
          description: Apellido del usuario
        email:
          type: string
          description: Correo electrónico del usuario
        password:
          type: string
          description: Contraseña del usuario
      example:
        first_name: "Federico"
        last_name: "Osandón"
        email: "fedeuserapi@gmail.com"
        password: "123456"

    UpdateUser:
      type: object
      properties:
        first_name:
          type: string
          description: Nombre del usuario
        last_name:
          type: string
          description: Apellido del usuario
        email:
          type: string
          description: Correo electrónico del usuario
        password:
          type: string
          description: Contraseña del usuario

    loginUser:
      type: object
      properties:
        email:
          type: string
          description: Correo electrónico del usuario
        password:
          type: string
          description: Contraseña del usuario
      example:
        email: "fedeuserapi@gmail.com"
        password: "123456"

#Request de Pets
    createPet:
      type: object
      properties:
        name:
          type: string
          description: Nombre de la mascota
        specie:
          type: string
          description: Especie de la mascota
        birthDate:
          type: string
          format: date
          description: Fecha de nacimiento de la mascota
        image:
          type: string
          description: URL de la imagen de la mascota
      example:
        name: "Firulais"
        specie: "Perro"
        birthDate: "2020-05-15"
        image: "https://example.com/imagen.jpg"

    updatePet:
      type: object
      properties:
        name:
          type: string
          description: Nombre de la mascota
        specie:
          type: string
          description: Especie de la mascota
        birthDate:
          type: string
          format: date
          description: Fecha de nacimiento de la mascota
        adopted:
          type: boolean
          description: Indica si la mascota ha sido adoptada
        image:
          type: string
          description: URL de la imagen de la mascota
      example:
        name: "Rex"
        specie: "Perro"
        birthDate: "2017-05-12"
        adopted: true
        image: "https://example.com/rex.jpg"
